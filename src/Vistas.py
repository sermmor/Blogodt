#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Dec  5 16:59:31 2011

import wx
import wx.html
import wx.lib.agw.hyperlink
import blogger
import modelo
import VistaAutentificar
import os

# begin wxGlade: extracode
# end wxGlade



class VistaVisorHTML(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: VistaVisorHTML.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.MAX_ENTRIES = 500 # Se mostrarán sólo las 500 entradas más actuales del blog.
        self.idBlogPrincipal = None
        self.service = None
        self.activeOffline = False
        self.pathHtmlOffline = ""
        self.listEntries = []
        self.listOfflineTitlePostText = [] # = [(tituloTextoHTML1, contenidoFicheroHTML1),...]
        self.postShow = None
        self.listBoxDrafts = wx.ListBox(self, -1, choices=[], style=wx.LB_HSCROLL)
        self.textCtrlTitleEntry = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY|wx.HSCROLL)
        self.textCtrlBodyEntry = wx.html.HtmlWindow(self, -1) # wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.TE_READONLY|wx.HSCROLL)
        self.buttonSaveHTML = wx.Button(self, -1, "Save HTML")
        self.buttonEditDraft = wx.Button(self, -1, "Edit post")
        self.buttonReturn = wx.Button(self, -1, "Choose other blog")
        
        self.__set_properties()
        self.__do_layout()
        # Eventos
        self.listBoxDrafts.Bind(wx.EVT_LISTBOX, self.elementSelected)
        self.buttonSaveHTML.Bind(wx.EVT_BUTTON, self.saveHtmlFile)
        self.buttonEditDraft.Bind(wx.EVT_BUTTON, self.editActualEntry)
        self.buttonReturn.Bind(wx.EVT_BUTTON, self.returnToAutentificar)
        
        # end wxGlade
    
    # Eventos
    def returnToAutentificar(self, evento=None):
        vista = VistaAutentificar.VistaAutentificacion(None, -1, "")
        # Hacemos manualmente el proceso de autentificación pero sin autentificar, ya que estamos autentificados y no hay que añadir lentitud a la aplicación.
        vista.service = self.service
        vista.setListInListBox()
        # Colocar foco en la lista de blogs.
        vista.listBoxBlogPrincipal.SetFocus()
        # Abrimos la VistaAutentificar y cerramos esta ventana.
        vista.Show()
        self.Close()
        
    def saveHtmlFile(self, evento=None):
        downloader = modelo.DownloadBloggerToFileHTML()
        downloader.setConnection(self.service)
        dialogoCargar=wx.DirDialog(self, "Choose a directory to save", defaultPath=os.path.realpath(""))
        i = dialogoCargar.ShowModal()
        if i == wx.ID_OK:
            rutaFichero = dialogoCargar.GetPath()
            try:
                downloader.saveHTMLPost(self.postShow, rutaFichero)
                confirmationMessage = wx.MessageDialog(self, "Post saved without problems", style=wx.OK)
                confirmationMessage.ShowModal()
            except:
                confirmationMessage = wx.MessageDialog(self, "Error to save post", style=wx.ICON_EXCLAMATION)
                confirmationMessage.ShowModal()
            
        
    def editActualEntry(self, evento=None):
        # Redirige a la página web de edición de la entrada en cuestión.
        abreLinks = wx.lib.agw.hyperlink.HyperLinkCtrl(self, wx.NewId())
        # http://www.blogger.com/blogger.g?blogID=<ID DEL BLOG>#editor/target=post;postID=<ID DEL POST ACTUAL>
        # <ID DEL BLOG> = self.idBlogPrincipal
        # <ID DEL POST ACTUAL> = self.postShow.GetEditLink().href.split('/')[-1]
        idPostShow = self.postShow.GetEditLink().href.split('/')[-1]
        abreLinks.GotoURL("http://www.blogger.com/blogger.g?blogID=" + self.idBlogPrincipal + "#editor/target=post;postID=" + idPostShow, True, True)
        
    # Evento que se activa al seleccionar un elemento del ListBox self.listBoxDrafts
    def elementSelected(self, evento=None):
        index = evento.GetInt()
        if self.activeOffline:
            elem = self.listOfflineTitlePostText[index]
            self.textCtrlTitleEntry.SetValue(elem[0])
            self.textCtrlBodyEntry.SetPage(elem[1])
        else: 
            # SI ES BORRADOR DEBE MOSTRARLO ANTES DEL TÍTULO CON LA ETIQUETA "[Borrador]"
            if (index > -1) and (len(self.listEntries) > 0):
                # Extraigo el post seleccionado de la lista
                self.postShow = self.listEntries[index]
                preTitle = "[Borrador]" if blogger.is_draft(self.postShow) else ""
                if (self.postShow.title.text != None): 
                    self.textCtrlTitleEntry.SetValue(preTitle + self.postShow.title.text)
                else:
                    self.textCtrlTitleEntry.SetValue(preTitle + "<Sín título>")
                if (self.postShow.content.text != None): 
                    self.textCtrlBodyEntry.SetPage(self.postShow.content.text)
                else:
                    self.textCtrlBodyEntry.SetPage("")
    
    # Utilidades.
    def reflesh(self):
        if self.idBlogPrincipal != None:
            downloader = modelo.DownloadBloggerToFileHTML()
            downloader.setConnection(self.service)
            self.listEntries = downloader.getListPost(self.idBlogPrincipal, self.MAX_ENTRIES)
            index = 0
            for post in self.listEntries:
                preTitle = "[Borrador]" if blogger.is_draft(post) else ""
                if (post.title.text != None):
                    self.listBoxDrafts.Insert(item=preTitle + post.title.text, pos=index)
                else:
                    self.listBoxDrafts.Insert(item=preTitle + "<Sín título>", pos=index)
                index = index + 1
    
    # sets y activadores necesarios para que esto funcione.
    def activateOffline(self, pathHTML):
        self.activeOffline = True
        self.buttonSaveHTML.Enable(False)
        self.buttonEditDraft.Enable(False)
        self.pathHtmlOffline = pathHTML
        # Hay que asignar a la lista por la cabeza para que el último post quede más arriba que los primeros.
        listDir = os.listdir(self.pathHtmlOffline)
        listDir.sort()
        pathFich = self.pathHtmlOffline + "/"
        for nomFich in listDir:
            try:
                indexhtml = nomFich.index(".html")
            except:
                indexhtml = -1
            if (indexhtml != -1):
                fich = open(pathFich + nomFich, 'Ur')
                textInFile = fich.read()
                fich.close()
                titleText = nomFich
                indexGuion = -1
                try:
                    indexGuion = nomFich.index(" - ")
                except:
                    indexGuion = -1
                if indexGuion != -1: 
                    titleText = nomFich[indexGuion + 3:indexhtml]
                self.listOfflineTitlePostText = [(titleText, textInFile)] + self.listOfflineTitlePostText
                # Añadir al listBox
                self.listBoxDrafts.Insert(item=titleText, pos=0)
    
    def setIDBlogPrincipal(self, idBlogPrincipal):
        self.idBlogPrincipal = idBlogPrincipal
    
    def setService(self, service):
        self.service = service
    
    def __set_properties(self):
        # begin wxGlade: VistaVisorHTML.__set_properties
        self.SetTitle("Visor Entradas Blog")
        self.listBoxDrafts.SetMinSize((242, 685))
        self.textCtrlTitleEntry.SetMinSize((1030, 37))
        self.textCtrlBodyEntry.SetMinSize((1030, 615))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: VistaVisorHTML.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(3, 1, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(1, 4, 0, 0)
        grid_sizer_1.Add(self.listBoxDrafts, 0, 0, 0)
        grid_sizer_2.Add(self.textCtrlTitleEntry, 0, 0, 4)
        grid_sizer_2.Add(self.textCtrlBodyEntry, 0, 0, 0)
        grid_sizer_3.Add(self.buttonEditDraft, 0, 0, 0)
        grid_sizer_3.Add(self.buttonReturn, 0, 0, 0)
        anchoBotonReturn = self.buttonReturn.GetDefaultSize().GetWidth()
        grid_sizer_3.Add((810 - anchoBotonReturn, 20), 0, 0, 0) # 810 - ancho(wx.Button)
        grid_sizer_3.Add(self.buttonSaveHTML, 0, 0, 0)
        grid_sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class VistaVisorHTML
